fn main() {
    let _packet = packet_sniffer::packet_builder::build_packet();
}




#[cfg(test)]
#[allow(unused)]
mod test {
    use packet_sniffer::{packet::{data_link::ETHII, Packet}, packet_builder};
    use anyhow::Result;
    use byte_slice::*;


    fn test_packet(packet: &str) -> Result<()> {
        let hex_stream = packet.hex_stream_to_vec();
        let mut bytes = Bytes::from_slice(&hex_stream);
        let ethii = ETHII::from_bytes(&mut bytes);
        println!("{:#x?}", ethii);
        Ok(())
    }

    // #[test]
    fn tcp_small_packet() -> Result<()> {
        let ipv4_raw_packet_data: [u8; 55] = [0x8, 0x26, 0x97, 0x6c, 0x21, 0x40, 0x20, 0x4e, 0xf6, 0x34, 0xc6, 0xe3, 0x8, 0x0, 0x45, 0x0, 0x0, 0x29, 0xa3, 0xb2, 0x40, 0x0, 0x80, 0x6, 0xd4, 0xa8, 0xc0, 0xa8, 0x1, 0x6a, 0xd, 0x59, 0xb3, 0x8, 0xfe, 0xa8, 0x1, 0xbb, 0xcb, 0x83, 0xaf, 0xdd, 0xe7, 0x7a, 0xff, 0x0, 0x50, 0x10, 0x0, 0xfb, 0xca, 0x23, 0x0, 0x0, 0x0];

        let mut ipv4_bytes = Bytes::from_slice(&ipv4_raw_packet_data);
        let ethernet_layer = ETHII::from_bytes(&mut ipv4_bytes)?;

        println!("ethernet_layer = {ethernet_layer:#x?}");

        Ok(())
    }


    // #[test]
    fn tcp_large_packet() -> Result<()> {
        // rand_cap_2.pcapng 20
        test_packet("204ef634c6e30826976c21400800450000d3dafe40006d063bea68d0cb59c0a8016a01bbc92111191d5bc88f07b450182000147c000017030300a6000000000000000d22c4cb9cf3dfdfb75480ff95559f43527c4b930ddb6a1699c0125885ff792de0f7ed4c9c672593b36089812f7f9313a64f97515d27edb4f7be2124bf689d8eadd67d268f4001a3fbb6c637c7b208654177c188cc0550c57a5729405e40ee28c46a1515c16da38dfda9e080dcdc1a1b496d253bea7d62d69a3fea719c0547bc1a64d8000a746a95d33fe19c096b08ffd7e1d88b6a96fbbffcdeea14ba9f73")
    }


    // #[test]
    fn arp_packet() -> Result<()> {
        test_packet("ffffffffffff0826976c2140080600010800060400010826976c2140c0a80101ffffffffffffc0a801c7")
    }


    // #[test]
    fn ipv6_packet1() -> Result<()> {
        // pcap2 no. 83
        test_packet("3333000000fb20efbd84b41586dd60000000004311fffe8000000000000022efbdfffe84b415ff0200000000000000000000000000fb14e914e90043aca100000000000100000000000015526f6b752053747265616d696e6720537469636b20085f616972706c6179045f746370056c6f63616c0000218001")
    }

    // #[test]
    fn ipv6_packet2() -> Result<()> {
        // pcap2 no. 96
        test_packet("3333000000fb204ef634c6e386dd600b2ace02ed1101fe8000000000000018203862e8ecb3faff0200000000000000000000000000fb14e914e902ed99ae000084000000000100000004065f646f737663045f746370056c6f63616c00000c80010000119400230f4445534b544f502d45363031564239065f646f737663045f746370056c6f63616c000f4445534b544f502d45363031564239065f646f737663045f746370056c6f63616c000021800100000078001d000000001e000f4445534b544f502d45363031564239056c6f63616c00c04c0010800100001194020207503d363532383015534830303d41752f5a464a52435345437139687a7415534830313d4474654848424f424f345871376c4d4c15534830323d4563493657754636725771556178784f15534830333d49573833544638534270307571636e7215534830343d505642665143664a2f38782f4c69526f15534830353d52596244534b684d554f5542724e6b5a15534830363d52382f43554a34634a6566685a75544215534830373d534b6c65536b5065666b72696e52596515534830383d566539646e306b6165375462624a476a15534830393d5a51626b384854326a4237464d557a7615534830613d6747332f5475745670386d375a6b445015534830623d694d51796b793865422f36663465514c15534830633d7070455058666c2b7861632b6d68564815534830643d714a3737506b5259485031725150746a15534830653d727a57327474366476304f4a424f487215534830663d76343252683359414d4d625554486a5315534831303d3154507744394f6e737176756156747615534831313d33356464617643447361396542554a5015534831323d34397059352b77784655662b2b33753915534831333d384c796f4c6b5855354855637054356d15534831343d395a623764636b34624c6d4259656f3515534831353d2b78645436464477503762586a31634315534831363d2b304d327a5757755a633055695a472b0f4445534b544f502d45363031564239056c6f63616c00000180010000003c0004c0a8016ac2a4001c80010000003c0010fe8000000000000018203862e8ecb3fa")
    }


    // #[test]
    fn icmp_packet1() -> Result<()> {
        // pcap2 no. 13
        test_packet("0826976c2140204ef634c6e308004500003cbea600008001f85ec0a8016ac0a8010108004d44000100176162636465666768696a6b6c6d6e6f7071727374757677616263646566676869")
    }

    // #[test]
    fn icmp_packet2() -> Result<()> {
        // pcap2 no. 14
        test_packet("204ef634c6e30826976c214008004500003c6acf000040018c36c0a80101c0a8016a00005544000100176162636465666768696a6b6c6d6e6f7071727374757677616263646566676869")
    }

    // #[test]
    fn icmp_packet3() -> Result<()> {
        // pcap2 no. 14
        test_packet("000102030405060708090a0b08004500003c00010000ff015a3bc0a80101c0a8010200007101000000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334353637")
    }

    #[test]
    fn packet_builder_test() -> Result<()> {
        let mut packet = packet_builder::build_packet()?;

        Ok(())
    }

}